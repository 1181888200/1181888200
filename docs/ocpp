<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <title>Ocpp 1.6 标准协议模拟器</title>

    <style>
        .row {
            margin-top: 15px;
        }
    </style>

</head>

<body>

    <div style="padding:3%;">


        <div class="row" style="width: 100%;">
            <div class="col-4">
                <!-- 设备连接信息-->
                <div class="row">
                    <div class="form-group col-md-12">
                        <label for="inputAddress">Websocket地址</label>
                        <input type="text" class="form-control" id="wsUrlInput"
                            value="ws://123.60.71.156:64587/30020302045000079" placeholder="ws://localhost:8088/1000">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="inputEmail4">设备SN号</label>
                        <input type="text" class="form-control" id="deviceSn" value="30020302045000079">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="inputPassword4">设备品牌</label>
                        <input type="text" class="form-control" id="deviceBrand" required value="IoTecha">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="inputEmail4">设备型号</label>
                        <input type="text" class="form-control" id="deviceModel" required value="CC">
                    </div>
                    <div class="form-group col-md-6">
                        <label for="inputPassword4">设备版本号</label>
                        <input type="text" class="form-control" id="deviceVersion">
                    </div>
                    <div class="form-group col-md-6">
                        <button id="connectBtn" onclick="toggleWebSocketConnection()"
                            class="btn btn-primary">设备接入</button>
                    </div>
                    <div class="form-group col-md-6">
                        <button onclick="clearLog()" class="btn btn-danger">清除日志</button>
                    </div>
                </div>

                <!-- 控制界面 -->
                <div class="row" id="sendContentDiv">

                    <div class="row">
                        <div class="form-group col-md-12">
                            <button onclick="sendHeart()" id='sendHeart' class="btn btn-primary">停止心跳</button>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <button onclick="bootNotification()" class="btn btn-primary">注册设备</button>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <button onclick="startTransaction()" id='startTransaction'
                                class="btn btn-primary">本地开启</button>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <button onclick="stopTransaction()" id='stopTransaction'
                                class="btn btn-primary">本地关闭</button>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <button onclick="notifyEVChargingNeeds()" id='notifyEVChargingNeeds'
                                class="btn btn-primary">V2X参数上报</button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">发送消息</span>
                            </div>
                            <textarea id="message" rows="5" cols="60" placeholder="输入消息"></textarea>
                            <br />
                            <button onclick="sendMessage()" class="btn btn-primary">发送</button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">状态通知</span>
                            </div>
                            <select class="form-control form-control-lg" id="statusNotification">
                                <option value="Available">Available</option>
                                <option value="Preparing">Preparing</option>
                                <option value="Charging">Charging</option>
                                <option value="SuspendedEV">SuspendedEV</option>
                                <option value="SuspendedEVSE">SuspendedEVSE</option>
                                <option value="Finishing">Finishing</option>
                                <option value="Reserved">Reserved</option>
                                <option value="Unavailable">Unavailable</option>
                                <option value="Faulted">Faulted</option>
                            </select>
                            <br />
                            <button onclick="statusNotification()" class="btn btn-primary">statusNotification</button>
                        </div>
                    </div>

                    <div class="row" style="border: 1px solid black;padding: 5px;">
                        <div class="form-group col-md-6">
                            <label for="inputEmail4">实时功率（W）</label>
                            <input type="number" class="form-control" id="currentPower" placeholder="实时功率, 默认5000">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="inputEmail4">当前电量（Wh）</label>
                            <input type="number" class="form-control" id="importEnergy" placeholder="当前电量，会自动追加之前电量">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="inputEmail4">放电实时功率（W）</label>
                            <input type="number" class="form-control" id="exportCurrentPower"
                                placeholder="放电实时功率（W）, 默认0">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="inputEmail4">放电电量（Wh）</label>
                            <input type="number" class="form-control" id="exportEnergy" placeholder="放电电量">
                        </div>
                        <div class="form-group col-md-6">
                            <div class="form-group col-md-6">
                                <button onclick="meterValues()" id="meterValues" class="btn btn-primary">上报数据</button>
                            </div>

                        </div>
                    </div>

                    <div class="row" style="border: 1px solid black;padding: 5px;">
                        <div class="form-group col-md-6">
                            <label for="inputEmail4">事务id</label>
                            <input type="number" class="form-control" id="manualTransactionId" placeholder="事务id">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="inputEmail4">结束充电电量（Wh）</label>
                            <input type="number" class="form-control" id="manualImportEnergy" placeholder="结束充电电量（Wh）">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="inputEmail4">结束放电电量（Wh）</label>
                            <input type="number" class="form-control" id="manualExportEnergy" placeholder="结束放电电量（Wh）">
                        </div>
                        <div class="form-group col-md-6">
                            <div class="form-group col-md-6">
                                <button onclick="manualStopTransaction()" id="meterValues"
                                    class="btn btn-primary">手动停止充电</button>
                            </div>

                        </div>
                    </div>



                </div>

            </div>
            <div class="col-8">
                <!-- 日志输出界面 -->
                <div id="messageDiv" class="overflow-auto"
                    style="min-height: 400px;width: 100%;height: 80%;border: 1px solid red;">

                </div>
            </div>
        </div>

    </div>




    <!-- 建立连接 -->
    <script>

        // 获取屏幕的高度
        const screenHeight = window.innerHeight - 200;

        // 获取需要设置高度的div元素
        const myDiv = document.getElementById('messageDiv');

        // 设置div的最大高度为屏幕高度
        myDiv.style.maxHeight = `${screenHeight}px`;

        var socket;
        function toggleWebSocketConnection() {
            if (!socket || socket.readyState === WebSocket.CLOSED) {
                connectWebSocket();
            } else {
                disconnectWebSocket();
            }
        }

        function checkConnect() {
            var deviceSn = $("#deviceSn").val();
            var deviceBrand = $("#deviceBrand").val();
            var deviceModel = $("#deviceModel").val();
            var deviceVersion = $("#deviceVersion").val();
            if (!deviceBrand || !deviceModel) {
                alertMsg("品牌、型号 必填")
                return false;
            }
            return true;
        }

        // 设置基础信息不可编辑
        function enableRegisterText(flag) {
            $('#wsUrlInput').prop('disabled', flag);
            $('#deviceSn').prop('disabled', flag);
            $('#deviceBrand').prop('disabled', flag);
            $('#deviceModel').prop('disabled', flag);
            $('#deviceVersion').prop('disabled', flag);
            if (!flag) {
                transactionId = null;
                startUuid = null
                stopHeart()
                $("#importEnergy").val("");
                $("#currentPower").val("");
                $("#exportCurrentPower").val("");
                $("#exportEnergy").val("");
                $("#sendContentDiv").hide();
            }
        }


    </script>


    <!-- 指令相关的 -->
    <script>

        // 心跳
        var heartTime = null;
        function startHeart(interval) {
            interval = interval ? interval : 45
            heartTime = setInterval(() => {
                var message = '[2,"' + generateUUID() + '","Heartbeat",{}]'
                sendSocketMessage(message)
            }, interval * 1000)
            $("#sendHeart").text("停止心跳")
            $("#sendHeart").removeClass("btn btn-primary").addClass("btn btn-danger");
        }

        function stopHeart() {
            if (heartTime) {
                clearInterval(heartTime)
                heartTime = null
            }
            $("#sendHeart").text("开启心跳")
            $("#sendHeart").removeClass("btn btn-danger").addClass("btn btn-primary");
        }

        function sendHeart() {
            if (heartTime) {
                stopHeart()
                return
            }
            $("#sendHeart").text("停止心跳")
            $("#sendHeart").removeClass("btn btn-primary").addClass("btn btn-danger");
            startHeart(45)
        }


        // 状态上报
        function statusNotification() {
            statusValue = $("#statusNotification").val();
            var message = '[2,"' + generateUUID() + '","StatusNotification",{"connectorId":1,"errorCode":"NoError","status":"' + statusValue + '"}]'
            sendSocketMessage(message)
        }

        // 设备注册
        function bootNotification() {
            var deviceVersion = $("#deviceVersion").val();
            deviceVersion = deviceVersion ? deviceVersion : '';
            var deviceSn = $("#deviceSn").val();
            deviceSn = deviceSn ? deviceSn : '';
            var message = '[2,"' + generateUUID() + '","BootNotification",{"chargePointVendor":"' + $("#deviceBrand").val() + '","chargePointModel":"' + $("#deviceModel").val() + '","firmwareVersion":"' + deviceVersion + '","chargePointSerialNumber":"' + deviceSn + '"}]'
            sendSocketMessage(message)
        }

        var transactionId = null;
        var startUuid = null;

        function notifyEVChargingNeeds() {
            var message = '[2,"' + generateUUID() + '","NotifyEVChargingNeeds",{"chargingNeeds":{"controlMode":"Dynamic","departureTime":"2024-04-30T05:45:56.000Z","mobilityNeedsMode":"EVCC","requestedEnergyTransfer":"AC_single_phase_BPT","v2xChargingParameters":{"evMaxEnergyRequest":25200,"evMinEnergyRequest":13400,"evTargetEnergyRequest":2800,"maxChargePower":11000,"maxDischargePower":11000,"minChargePower":0,"minDischargePower":0,"evMinV2XEnergyRequest":100,"evMaxV2XEnergyRequest":24900}},"evseId":1,"timestamp":"' + formatTime() + '"}]'
            sendSocketMessage(message)
        }

        function manualStopTransaction() {
            manualTransactionId = $("#manualTransactionId").val();
            if (!manualTransactionId) {
                alertMsg("请输入事务ID，从通讯中获取或者订单中获取");
            }

            manualExportEnergy = $("#manualExportEnergy").val();
            if (manualExportEnergy) {
                var message = '[2, "' + generateUUID() + '", "MeterValues", { "connectorId" : 1, "meterValue" : [ { "sampledValue" : [ { "context" : "Transaction.Begin", "format" : "Raw", "location" : "Outlet", "measurand" : "Energy.Active.Export.Register", "unit" : "Wh", "value" : "' + manualExportEnergy + '" } ], "timestamp" : "' + formatTime() + '" } ]'
                message += ', "transactionId" : ' + manualTransactionId + ''
                 message += ' }]'
                sendSocketMessage(message)
            }

            manualImportEnergy = $("#manualImportEnergy").val();
            manualImportEnergy = manualImportEnergy ? manualImportEnergy : '';
            var message = ' [2,"' + generateUUID() + '","StopTransaction",{"meterStop":' + manualImportEnergy + ',"timestamp":"' + formatTime() + '","transactionId":' + manualTransactionId + ',"idTag":""}]'
            transactionId = null;
            startUuid = null
            clearOrderInfo()
            sendSocketMessage(message)
            $("#statusNotification").val("Finishing");
            statusNotification();
            return

            


        }

        // 本地关闭
        function stopTransaction() {
            if (transactionId) {
                var energy = getOrderInfo(transactionId);
                var message = ' [2,"' + generateUUID() + '","StopTransaction",{"meterStop":' + energy + ',"timestamp":"' + formatTime() + '","transactionId":' + transactionId + ',"idTag":""}]'
                transactionId = null;
                startUuid = null
                clearOrderInfo()
                sendSocketMessage(message)
                $("#statusNotification").val("Finishing");
                statusNotification();
                return
            }
            alertMsg("桩目前没有正在充电")
        }
        // 本地开启
        function startTransaction() {
            if (startUuid) {
                alertMsg("桩目前正在充电")
                return
            }
            startUuid = generateUUID()
            var message = '[2,"' + startUuid + '","StartTransaction",{"connectorId":1,"idTag":"","meterStart":825616,"timestamp":"' + formatTime() + '"}]'
            sendSocketMessage(message)
        }

        // 上报数据
        function meterValues() {
            currentPower = $("#currentPower").val();
            exportCurrentPower = $("#exportCurrentPower").val();
            importEnergy = $("#importEnergy").val();
            exportEnergy = $("#exportEnergy").val();
            currentPower = currentPower ? currentPower : 5000;
            exportCurrentPower = exportCurrentPower ? exportCurrentPower : 0;
            importEnergy = importEnergy ? importEnergy : '';
            exportEnergy = exportEnergy ? exportEnergy : '';
            var importEnergy = Number(getOrderInfo(transactionId)) + Number(importEnergy);
            var message = '[2, "' + generateUUID() + '", "MeterValues", { "connectorId" : 1, "meterValue" : [ { "sampledValue" : [ { "context" : "Transaction.Begin", "format" : "Raw", "location" : "Outlet", "measurand" : "Energy.Active.Import.Register", "unit" : "Wh", "value" : "' + importEnergy + '" }, { "context" : "Transaction.Begin", "format" : "Raw", "location" : "Outlet", "measurand" : "Power.Active.Import", "unit" : "W", "value" : "' + currentPower + '" },{ "context" : "Transaction.Begin", "format" : "Raw", "location" : "Outlet", "measurand" : "Energy.Active.Export.Register", "unit" : "Wh", "value" : "' + exportEnergy + '" },{ "context" : "Transaction.Begin", "format" : "Raw", "location" : "Outlet", "measurand" : "Power.Active.Export", "unit" : "W", "value" : "' + exportCurrentPower + '" } ], "timestamp" : "' + formatTime() + '" } ]'
            if (transactionId) {
                message += ', "transactionId" : ' + transactionId + ''
                setOrderInfo(transactionId, currentPower == '' ? 5000 : currentPower, $("#importEnergy").val())
            }
            message += ' }]'
            sendSocketMessage(message)
            return false;
        }

    </script>

    <script>
        // 处理服务器发送过来的数据
        function handlerMessage(message) {
            messageDiv(2, message)
            // RemoteStartTransaction
            var jsonArray = JSON.parse(message);
            var uuid = jsonArray[1]
            var key = jsonArray[0]
            var cmd = jsonArray[2]
            // 远程开启
            if (cmd == 'RemoteStartTransaction') {
                // 想要接受到数据
                var message = '[3, "' + uuid + '", { "status" : "Accepted" }]'
                sendSocketMessage(message)
                startTransaction()
                return
            }
            if (cmd == 'RemoteStopTransaction') {
                // 想要接受到数据
                var message = '[3, "' + uuid + '", { "status" : "Accepted" }]'
                sendSocketMessage(message)
                stopTransaction()
                return
            }
            if (cmd == 'SetChargingProfile' || cmd == 'ClearChargingProfile' || cmd == 'ChangeConfiguration') {
                // 想要接受到数据
                var message = '[3, "' + uuid + '", { "status" : "Accepted" }]'
                sendSocketMessage(message)
                return
            }

            if (cmd == 'UnlockConnector') {
                // 想要接受到数据
                var message = '[3, "' + uuid + '", { "status" : "Unlocked" }]'
                sendSocketMessage(message)
                return
            }

            if (cmd == 'TriggerMessage') {
                // 想要接受到数据
                var message = '[3, "' + uuid + '", { "status" : "Accepted" }]'
                sendSocketMessage(message)

                var event = jsonArray[3].requestedMessage
                if (event == 'StatusNotification') {
                    // 上报状态
                    statusNotification()
                }
                if (event == 'MeterValues') {
                    // 上报状态
                    // meterValues()
                }
                return
            }


            if (cmd == 'GetConfiguration') {
                // 想要接受到数据
                var message = '[3, "' + uuid + '", { "configurationKey" : [ { "key" : "AllowOfflineTxForUnknownId", "readonly" : false, "value" : "true" }, { "key" : "AuthorizationCacheEnabled", "readonly" : false, "value" : "false" }, { "key" : "AuthorizeRemoteTxRequests", "readonly" : false, "value" : "false" }, { "key" : "ClockAlignedDataInterval", "readonly" : false, "value" : "0" }, { "key" : "ConnectionTimeOut", "readonly" : false, "value" : "30" }, { "key" : "ConnectorPhaseRotation", "readonly" : false, "value" : "0.NotApplicable, 1.RST, 2.NotApplicable" }, { "key" : "ConnectorPhaseRotationMaxLength", "readonly" : true, "value" : "3" }, { "key" : "GetConfigurationMaxKeys", "readonly" : true, "value" : "64" }, { "key" : "HeartbeatInterval", "readonly" : false, "value" : "90" }, { "key" : "LightIntensity", "readonly" : false, "value" : "100" }, { "key" : "LocalAuthorizeOffline", "readonly" : false, "value" : "true" }, { "key" : "LocalPreAuthorize", "readonly" : false, "value" : "true" }, { "key" : "MaxEnergyOnInvalidId", "readonly" : false, "value" : "1000" }, { "key" : "MeterValuesAlignedData", "readonly" : false, "value" : "Current.Offered,Current.Import,Power.Offered,Power.Active.Import,Voltage,Energy.Active.Import.Register" }, { "key" : "MeterValuesAlignedDataMaxLength", "readonly" : true, "value" : "22" }, { "key" : "MeterValuesSampledData", "readonly" : false, "value" : "Energy.Active.Import.Register,Power.Active.Import" }, { "key" : "MeterValuesSampledDataMaxLength", "readonly" : true, "value" : "22" }, { "key" : "MeterValueSampleInterval", "readonly" : false, "value" : "15" }, { "key" : "MinimumStatusDuration", "readonly" : false, "value" : "3" }, { "key" : "NumberOfConnectors", "readonly" : true, "value" : "1" }, { "key" : "ResetRetries", "readonly" : false, "value" : "1" }, { "key" : "StopTransactionOnEVSideDisconnect", "readonly" : true, "value" : "true" }, { "key" : "StopTransactionOnInvalidId", "readonly" : false, "value" : "true" }, { "key" : "StopTxnAlignedData", "readonly" : false, "value" : "Energy.Active.Import.Register" }, { "key" : "StopTxnAlignedDataMaxLength", "readonly" : true, "value" : "22" }, { "key" : "StopTxnSampledData", "readonly" : false, "value" : "Energy.Active.Import.Register" }, { "key" : "StopTxnSampledDataMaxLength", "readonly" : true, "value" : "22" }, { "key" : "SupportedFeatureProfiles", "readonly" : true, "value" : "Core, FirmwareManagement, LocalAuthListManagement, Reservation, SmartCharging, RemoteTrigger" }, { "key" : "SupportedFeatureProfilesMaxLength", "readonly" : true, "value" : "6" }, { "key" : "TransactionMessageAttempts", "readonly" : false, "value" : "3" }, { "key" : "TransactionMessageRetryInterval", "readonly" : false, "value" : "15" }, { "key" : "OutgoingMessageRetryInterval_s", "readonly" : false, "value" : "90" }, { "key" : "UnlockConnectorOnEVSideDisconnect", "readonly" : false, "value" : "true" }, { "key" : "WebSocketPingInterval", "readonly" : false, "value" : "15" }, { "key" : "EnableTransactionBeginMeterValues", "readonly" : false, "value" : "true" }, { "key" : "EnableTransactionEndMeterValues", "readonly" : false, "value" : "true" }, { "key" : "EnableFaultsDuplicatingToOtherConn", "readonly" : true, "value" : "false" }, { "key" : "LocalAuthListEnabled", "readonly" : false, "value" : "true" }, { "key" : "LocalAuthListMaxLength", "readonly" : true, "value" : "256" }, { "key" : "SendLocalListMaxLength", "readonly" : true, "value" : "64" }, { "key" : "ReserveConnectorZeroSupported", "readonly" : true, "value" : "false" }, { "key" : "ChargeProfileMaxStackLevel", "readonly" : true, "value" : "16" }, { "key" : "ChargingScheduleAllowedChargingRateUnit", "readonly" : true, "value" : "Current,Power" }, { "key" : "ChargingScheduleMaxPeriods", "readonly" : true, "value" : "40" }, { "key" : "ConnectorSwitch3to1PhaseSupported", "readonly" : true, "value" : "false" }, { "key" : "MaxChargingProfilesInstalled", "readonly" : true, "value" : "16" }, { "key" : "CentralSystemURL", "readonly" : false, "value" : "ws://1.94.107.160:30016/ocpp-one/" }, { "key" : "CentralSystemVersion", "readonly" : false, "value" : "1.6" }, { "key" : "LanMode", "readonly" : false, "value" : "dhcp" }, { "key" : "LanStaticIp", "readonly" : false, "value" : "192.168.0.254" }, { "key" : "LanStaticGateway", "readonly" : false, "value" : "0.0.0.0" }, { "key" : "LanStaticNetmask", "readonly" : false, "value" : "255.255.255.0" }, { "key" : "DelayForRestartTxAfterPowerLoss", "readonly" : false, "value" : "600" }, { "key" : "DisableISO15118Communication", "readonly" : false, "value" : "true" }, { "key" : "RfidTagReaderEnabled", "readonly" : false, "value" : "false" }, { "key" : "RfidTagAuthMode", "readonly" : false, "value" : "OCPP" }, { "key" : "AllowRestartTxAfterPowerLoss", "readonly" : false, "value" : "true" }, { "key" : "RfidTagForRestartTxAfterPowerLoss", "readonly" : false, "value" : "RestartTxTag" }, { "key" : "IoTechaBootMode", "readonly" : false, "value" : "Unknown" }, { "key" : "IoTechaOcppOfflineAuthMode", "readonly" : false, "value" : "Free Access" }, { "key" : "RfidTagStandaloneTag", "readonly" : false, "value" : "RFID Reader Disabled" }, { "key" : "IoTechaHeartbeatSyncTime", "readonly" : false, "value" : "false" }, { "key" : "IoTechaDischargeScheduleEnabled", "readonly" : false, "value" : "false" }, { "key" : "IoTechaOCPPFreeAccessTokenId", "readonly" : false, "value" : "RFID Reader Disabled" }, { "key" : "IoTechaAuthorizationMode", "readonly" : false, "value" : "Standalone Free Access" }, { "key" : "TimeZone", "readonly" : false, "value" : "UTC" }, { "key" : "IoTechaHmiLEDLevel1", "readonly" : false, "value" : "medium" }, { "key" : "Modem_IMEI", "readonly" : true, "value" : "Unavailable" }, { "key" : "WifiRssi", "readonly" : true, "value" : "Unavailable" }, { "key" : "CustomACChargingMaxCurrent_mA", "readonly" : false, "value" : "32000" }, { "key" : "SkipRandomizedDelaysUntilUnplugEnabled", "readonly" : false, "value" : "false" }, { "key" : "RandomizedDelayMax", "readonly" : false, "value" : "0" }, { "key" : "SameRandomizedDelayUntilUnplug", "readonly" : false, "value" : "false" }, { "key" : "RandomizedDelayEnableOverrideByButton", "readonly" : false, "value" : "false" }, { "key" : "RandomizedDelayOverrideByRfidEnable", "readonly" : false, "value" : "false" }, { "key" : "SkipMeterValuesOffline", "readonly" : false, "value" : "false" }, { "key" : "OCPUnderVoltageThreshold", "readonly" : false, "value" : "0" }, { "key" : "PENCurrentLimit_mA", "readonly" : false, "value" : "30" }, { "key" : "PENRmsVoltageLimit_mV", "readonly" : false, "value" : "187600" }, { "key" : "OCPOverVoltageThreshold", "readonly" : false, "value" : "0" }, { "key" : "IoTechaPermanentLock", "readonly" : false, "value" : "false" }, { "key" : "SoftLimitDesiredTrackerThreshold", "readonly" : false, "value" : "120" }, { "key" : "UseLocalTimeForReporting", "readonly" : false, "value" : "false" }, { "key" : "MeterTypeSet", "readonly" : false, "value" : "" }, { "key" : "RemoteScheduleSources", "readonly" : false, "value" : "" }, { "key" : "IotechaRotarySwitchLimit", "readonly" : true, "value" : "32" }, { "key" : "IotechaRotarySwitchPosition", "readonly" : true, "value" : "6" }, { "key" : "MeterValuesSwapEnabled", "readonly" : true, "value" : "false" }, { "key" : "MeterValuesSwapData", "readonly" : true, "value" : "Power.Active" }, { "key" : "TamperDetectionEnabled", "readonly" : false, "value" : "false" }, { "key" : "IoTechaUseChargerTimezoneForSchedulesProcessing", "readonly" : false, "value" : "false" }, { "key" : "IoTechaAuthorizationMethod", "readonly" : false, "value" : "FreeAccess" }, { "key" : "SupportedFileTransferProtocols", "readonly" : true, "value" : "FTP, FTPS, HTTP, HTTPS" }, { "key" : "EV41SuspendChargingEnabled", "readonly" : false, "value" : "true" } ] }]'
                sendSocketMessage(message)
                return
            }



            // 本地开启的
            if (startUuid && uuid == startUuid) {
                transactionId = cmd.transactionId
                $("#statusNotification").val("Charging");
                statusNotification();
            }

        }



    </script>

    <script>

        $("#sendContentDiv").hide();

        function connectWebSocket() {
            var wsUrl = $("#wsUrlInput").val();
            if (!wsUrl) {
                alertMsg("请输入websocket地址");
                return;
            }

            if (!checkConnect()) {
                return
            }

            try {
                // 创建WebSocket对象
                // socket = new WebSocket(wsUrl + "/" + $("#deviceSn").val(), [ 'ocpp1.6', 'ocpp1.6v2x', 'ocpp1.5']);
                socket = new WebSocket(wsUrl , [ 'ocpp1.6', 'ocpp1.6v2x', 'ocpp1.5']);
            } catch (error) {
                // 捕获错误并打印错误信息
                // 提示用户WebSocket创建失败
                alertMsg('WebSocket连接失败：' + error.message);
                return
            }


            socket.onopen = function (event) {
                messageDiv(1, "WebSocket 已连接 ")
                // bootNotification()
                updateButtonState(true);
            };

            socket.onmessage = function (event) {
                handlerMessage(event.data)
            };

            socket.onclose = function (event) {
                console.log(event)
                messageDiv(1, "WebSocket 连接已关闭")
                updateButtonState(false);
            };

            socket.onerror = function (error) {
                messageDiv(1, "client WebSocket 错误：: " + error)
            };
        }

        function disconnectWebSocket() {
            if (socket) {
                socket.close();
                messageDiv(1, "手动断开 WebSocket 连接")
            }
        }

        function updateButtonState(connected) {
            if (connected) {
                $("#connectBtn").text('断开连接');
                $("#connectBtn").removeClass("btn btn-primary").addClass("btn btn-danger");
                $("#sendContentDiv").show();
                startHeart(45)
                enableRegisterText(true)
            } else {
                $("#connectBtn").text('设备接入');
                $("#connectBtn").removeClass("btn btn-danger").addClass("btn btn-primary");
                $("#sendContentDiv").hide();
                stopHeart()
                enableRegisterText(false)
            }
        }

        function sendMessage() {
            var message = $("#message").val();
            sendSocketMessage(message)
        }


    </script>


    <script>

        function sendSocketMessage(message) {
            if (!message) {
                return
            }
            if (!socket) {
                alertMsg("请先设备接入")
                return
            }
            socket.send(message);
            messageDiv(1, message)
        }


        function alertMsg(message) {
            alert(message)
        }

        function generateUUID() {
            var d = new Date().getTime();
            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d / 16);
                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
            return uuid;
        }

        function clearLog() {
            $('#messageDiv').html('')
        }

        function formatTime() {
            var date = new Date();
            date.setHours(date.getHours() - 8)
            var year = date.getFullYear();
            var month = date.getMonth() + 1; // 月份从0开始，需要加1
            var day = date.getDate();
            var hour = date.getHours();
            var minute = date.getMinutes();
            var second = date.getSeconds();
            return year + '-' + getZoneStr(month) + month + '-' + getZoneStr(day) + day + 'T' + getZoneStr(hour) + hour + ':' + getZoneStr(minute) + minute + ':' + getZoneStr(second) + second + ".000Z";
        }

        function getZoneStr(value) {
            return value < 10 ? "0" : "";
        }


        function messageDiv(type, message) {
            var messageDiv = document.getElementById("messageDiv");
            var div = document.createElement("div");
            zujian = type == 1 ? '<div class="p-3 mb-2 bg-danger text-white">时间' + formatTime() + ' ' + message + '</div>' : '<div class="p-3 mb-2 bg-success text-white">时间' + formatTime() + ' ' + message + '</div>';

            zujian = type != 1 ? '<div class="d-flex flex-row bd-highlight"><div class="p-2 bd-highlight"><img src="https://static-qn.51miz.com/assets-v2/images/header/vip-firm-purple@2x.png" class="mr-3 scale-img" alt="..."></div><div class="p-2 bd-highlight" style="display: flex;justify-content: center; align-items: center; ">' + message + '</div></div>'
                : '<div class="d-flex flex-row-reverse bd-highlight"><div class="p-2 bd-highlight"> <img src="https://static-qn.51miz.com/assets-v2/images/header/vip-person-green@2x.png" class="mr-3 scale-img" alt="..."></div><div class="p-2 bd-highlight" style="display: flex;justify-content: center; align-items: center; ">' + message + '</div></div>'

            div.innerHTML = zujian;
            messageDiv.appendChild(div);
            scrollToBottom(messageDiv)
        }

        function scrollToBottom(element) {
            element.scrollTop = element.scrollHeight;
        }

    </script>

    <script>
        // 本地缓存数据

        // 设置订单信息
        function setOrderInfo(transactionId, power, energy) {
            var orderInfo = sessionStorage.getItem(transactionId);
            if (orderInfo) {
                orderInfo = JSON.parse(orderInfo);
            } else {
                orderInfo = {};
            }
            orderInfo.power = power;
            orderInfo.energy = Number((orderInfo.energy ? orderInfo.energy : 0)) + Number(energy);
            sessionStorage.setItem(transactionId, JSON.stringify(orderInfo));
        }

        function getOrderInfo(transactionId) {
            var orderInfo = sessionStorage.getItem(transactionId);
            if (orderInfo) {
                orderInfo = JSON.parse(orderInfo);
            } else {
                orderInfo = {}
            }
            return orderInfo.energy ? Number(orderInfo.energy) : 0
        }

        function clearOrderInfo() {
            sessionStorage.clear();
        }

    </script>

</body>

</html>
